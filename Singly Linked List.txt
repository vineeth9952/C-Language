Singly Linked List

#include<stdio.h>
#include<stdlib.h>
struct Node
{
	int data;
	struct Node *next;
};
struct Node *Head = NULL;
void Insert_at_End(int data)
{
	struct Node *temp,*newnode;
	temp = Head;
	
	newnode = (struct Node *)malloc(sizeof(struct Node));
	newnode->data = data;
	newnode->next = NULL;
	
	if(Head == NULL)
		Head = newnode;
	else
	{
		while(temp->next != NULL)
			temp = temp->next;
		temp->next = newnode;
	}
}
void Insert_at_Begin(int data)
{
    struct Node *temp,*newnode;
	temp = Head;
	
	newnode = (struct Node *)malloc(sizeof(struct Node));
	newnode->data = data;
	newnode->next = NULL;
	
	if(Head == NULL)
		Head = newnode;
	else
	{
		newnode->next = Head;
		Head = newnode;
	}
}
void Insert_at_Position(int data,int pos)
{
	struct Node *temp,*newnode;
	temp = Head;
	
	newnode = (struct Node *)malloc(sizeof(struct Node));
	newnode->data = data;
	newnode->next = NULL;
	pos = pos-2;
	
	
		while(pos-->0)
		{
			temp = temp->next;
		}
		
		newnode->next=temp->next;
		temp->next = newnode;
	
}
void Deletion_at_Begin()
{
    struct Node *temp;
	temp = Head;
	
	if(Head == NULL)
	{
	    printf("NO elements are Present");
		return;
    }
	else
	{
		Head = Head->next;
	}
}
void Deletion_at_End()
{
	struct Node *temp;
	temp = Head;
	
	if(Head == NULL)
		printf("NO elements");
	else
	{
		while(temp->next->next!= NULL)
			temp = temp->next;
		temp->next = NULL;
	}
}
void Deletion_at_Position(int pos)
{
	struct Node *temp;
	temp = Head;
	pos = pos-2;
	
	if (pos==-1)
	{
	    Head = Head->next;
	    return ;
	}
	while(pos-->0)
	{
	    temp = temp->next;
	}
		
	temp->next = temp->next->next;
	
}
void display()
{
    struct Node *temp ;
    temp = Head;
	while( temp != NULL)
	{
		printf("%d ",temp->data);
		temp = temp->next;
	}
}
int main()
{
	int data;
	do
	{
		scanf("%d",&data);
		if(data>0)
		    Insert_at_Begin(data);
	}while(data>0);
	
	Deletion_at_Position(1);
	
	display();
	
	printf("\n");
		return 0;
}